/**
 * Snap7Service
 * @description :: Server-side logic for managing Snap7
 */

const snap7 = require("node-snap7");
const Operation = require("../models/operation.model.js");

/**
 * @description :: Create a new Snap7 client and connect to the PLC
 */
const s7client = new snap7.S7Client();

/**
 * Connect to the PLC
 * @param ip
 */
function plcConnect(ip) {
  return new Promise((resolve, reject) => {
    s7client.ConnectTo(ip, 0, 1, function (err) {
      if (err) {
        console.log(
          " >> Connection failed. Code #" +
            err +
            " - " +
            s7client.ErrorText(err)
        );
        return reject(err);
      }

      console.log(" >> Connected");
      resolve();
    });
  });
}

/**
 * @description :: Check if the client is connected to the PLC
 */
function isPlcConnected() {
  return s7client.Connected();
}

/**
 * @description :: Read a boolean value from the PLC
 * @param {number} dbNumber - The DB number
 * @param {number} byte - The byte number
 * @param {number} bit - The bit number
 * @returns {Promise} - The boolean value
 */
function readBoolean(dbNumber, byte, bit) {
  return new Promise((resolve, reject) => {
    s7client.DBRead(dbNumber, byte, 1, function (err, res) {
      if (err) {
        console.log(
          " >> DBRead failed. Code #" + err + " - " + s7client.ErrorText(err)
        );
        return reject(err);
      }
      const value = (res[0] >> bit) & 1;
      resolve({ value });
    });
  });
}

/**
 * Read a word value from the PLC
 * @param dbNumber
 * @param byte
 * @returns
 */
function readWord(dbNumber, byte) {
  return new Promise((resolve, reject) => {
    s7client.DBRead(dbNumber, byte, 2, function (err, res) {
      if (err) {
        console.log(
          " >> DBRead failed. Code #" + err + " - " + s7client.ErrorText(err)
        );
        return reject(err);
      }
      const value = res.readUInt16BE(0);
      resolve({ value });
    });
  });
}

/**
 * Read a string value from the PLC
 * @param dbNumber
 * @param start
 * @param length
 * @returns
 */
function readString(dbNumber, start, length) {
  return new Promise((resolve, reject) => {
    s7client.DBRead(dbNumber, start, length + 2, function (err, res) {
      if (err) {
        console.log(
          " >> DBRead failed. Code #" + err + " - " + s7client.ErrorText(err)
        );
        return reject(err);
      }
      // Remove non-printable characters and trim whitespace
      const value = res
        .toString("utf8")
        .replace(/[^\x20-\x7E]/g, "")
        .trim();
      resolve({ value });
    });
  });
}

/**
 * Write a boolean value to the PLC
 * @param dbNumber
 * @param byte
 * @param bit
 * @param value
 * @returns
 */
async function writeBoolean(dbNumber, start, bit, value) {
    const buf = Buffer.alloc(1);
    let byteValue = await new Promise((resolve, reject) => {
      s7client.DBRead(dbNumber, start, 1, (err, res) => {
        if (err) {
          reject(err);
        } else {
          resolve(res.readUInt8(0));
        }
      });
    }).catch((err) => {
      console.log("Error reading byte:", err);
      throw err;
    });
  
    if (value) {
      byteValue |= (1 << bit);
    } else {
      byteValue &= ~(1 << bit);
    }
  
    buf.writeUInt8(byteValue, 0);
  
    return new Promise((resolve, reject) => {
      s7client.WriteArea(s7client.S7AreaDB, dbNumber, start, 1, s7client.S7WLByte, buf, (err) => {
        if (err) {
          reject(err);
        } else {
          resolve();
        }
      });
    }).catch((err) => {
      console.log("Error writing byte:", err);
      throw err;
    });
  }

/**
 * Trigger for creating a new operation on database
 */
async function listenAndProcess() {
  while (true) {
    const { value } = await readBoolean(26, 120, 0);
    if (value === 1) {
      const regNum = (await readString(26, 0, 11)).value;
      const partnumber = (await readString(26, 14, 15)).value;
      const recipe = (await readString(26, 32, 20)).value;
      const statusOk = (await readBoolean(26, 54, 0)).value;
      const qtyTorque = (await readWord(26, 56)).value;

      const newOperation = {
        reg_num: regNum,
        partnumber: partnumber,
        recipe: recipe,
        status_ok: statusOk,
        qty_torque: qtyTorque,
      };

      const operation = new Operation(newOperation);

      await operation
        .save()
        .then(async () => {
          console.log("Operation created successfully");
          setTimeout(() => {
            writeBoolean(26, 58, 0, true);
          }, 2000);
        })
        .catch((err) => {
          console.log("Error creating operation");
          console.log(err);
        });
    }
    await new Promise((resolve) => setTimeout(resolve, 3000)); // Wait 3 second
  }
}

module.exports = {
  plcConnect,
  listenAndProcess,
};
